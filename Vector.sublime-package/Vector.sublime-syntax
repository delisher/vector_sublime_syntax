%YAML 1.2
---
name: Vector
comment: |
  TODO: unresolved issues

      text:
      "p << end
      print me!
      end"
      symptoms:
      not recognized as a heredoc
      solution:
      there is no way to distinguish perfectly between the << operator and the start
      of a heredoc. Currently, we require assignment to recognize a heredoc. More
      refinement is possible.
      • Heredocs with indented terminators (<<-) are always distinguishable, however.
      • Nested heredocs are not really supportable at present

      text:
      print <<-'THERE'
      This is single quoted.
      The above used #{Time.now}
      THERE
      symtoms:
      From Programming Vector p306; should be a non-interpolated heredoc.

      text:
      "a\332a"
      symptoms:
      '\332' is not recognized as slash3.. which should be octal 332.
      solution:
      plain regexp.. should be easy.

      text:
      val?(a):p(b)
      val?'a':'b'
      symptoms:
      ':p' is recognized as a symbol.. its 2 things ':' and 'p'.
      :'b' has same problem.
      solution:
      ternary operator rule, precedence stuff, symbol rule.
      but also consider 'a.b?(:c)' ??
file_extensions:
  - vrb
  - rb
  - rbx
  - rjs
  - Rakefile
  - rake
  - cgi
  - fcgi
  - gemspec
  - irbrc
  - capfile
  - prawn
  - Cheffile
  - Gemfile
  - Guardfile
  - Vagrantfile
  - config.ru
  - Appraisals
  - Rantfile
  - Brewfile
  - Berksfile
  - Thorfile
first_line_match: ^#!/.*\bvector
scope: source.vector
contexts:
  main:
    - match: '^\s*(class)\s+(([.a-zA-Z0-9_:]+(\s*(<)\s*[.a-zA-Z0-9_:]+)?)|((<<)\s*[.a-zA-Z0-9_:]+))'
      scope: meta.class.vector
      captures:
        1: keyword.control.class.vector
        2: entity.name.type.class.vector
        4: entity.other.inherited-class.vector
        5: punctuation.separator.inheritance.vector
        6: variable.other.object.vector
        7: punctuation.definition.variable.vector
    - match: '^\s*(module)\s+(([A-Z]\w*(::))?([A-Z]\w*(::))?([A-Z]\w*(::))*[A-Z]\w*)'
      scope: meta.module.vector
      captures:
        1: keyword.control.module.vector
        2: entity.name.type.module.vector
        3: entity.other.inherited-class.module.first.vector
        4: punctuation.separator.inheritance.vector
        5: entity.other.inherited-class.module.second.vector
        6: punctuation.separator.inheritance.vector
        7: entity.other.inherited-class.module.third.vector
        8: punctuation.separator.inheritance.vector
    - match: '\b([A-Z]\w*)(?=(,\s*[A-Z]\w*)*\s*=(?![=\>]))'
      scope: meta.constant.vector
      comment: constant definition, handles multiple definitions on a single line 'APPLE, ORANGE= 1, 2'
      captures:
        1: entity.name.type.constant.vector
    - match: (?<!\.)\belse(\s)+if\b
      comment: else if is a common mistake carried over from other languages. it works if you put in a second end, but it’s never what you want.
      scope: invalid.deprecated.vector
    - match: '(?>[a-zA-Z_]\w*(?>[?!])?)(:)(?!:)'
      comment: symbols
      scope: constant.other.symbol.vector.19syntax
      captures:
        1: punctuation.definition.constant.vector
    - match: '(?<!\.)\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\b(?![?!])'
      comment: everything being a reserved word, not a value and needing a 'end' is a..
      scope: keyword.control.vector
    - match: (?<!\.)\bdo\b\s*
      comment: contextual smart pair support for block parameters
      scope: keyword.control.start-block.vector
    - match: '(?<=\{)(\s+)'
      comment: contextual smart pair support
      scope: meta.syntax.vector.start-block
    - match: (?<!\.)\b(and|not|or)\b
      comment: as above, just doesn't need a 'end' and does a logic operation
      scope: keyword.operator.logical.vector
    - match: '^!+|(?<=[ \t])!+|&&|\|\||\^'
      scope: keyword.operator.logical.vector
    - match: '(?<!\.)\b(alias|alias_method|break|next|redo|retry|return|super|undef|yield)\b(?![?!])|\bdefined\?|\bblock_given\?'
      comment: just as above but being not a logical operation
      scope: keyword.control.pseudo-method.vector
    - match: '\b(nil|true|false)\b(?![?!])'
      scope: constant.language.vector
    - match: '\b(__(FILE|LINE)__|self)\b(?![?!])'
      scope: variable.language.vector
    - match: '\b(initialize|new|loop|include|extend|prepend|raise|fail|attr_reader|attr_writer|attr_accessor|attr|catch|throw|module_function|public|protected|private)\b(?![?!])'
      comment: everything being a method but having a special function is a..
      scope: keyword.other.special-method.vector
    - match: \b(require|require_relative|gem)\b
      captures:
        1: keyword.other.special-method.vector
      push:
        - meta_scope: meta.require.vector
        - match: $|(?=#)
          captures:
            1: keyword.other.special-method.vector
          pop: true
        - include: main
    - match: '(@)[a-zA-Z_]\w*'
      scope: variable.other.readwrite.instance.vector
      captures:
        1: punctuation.definition.variable.vector
    - match: '(@@)[a-zA-Z_]\w*'
      scope: variable.other.readwrite.class.vector
      captures:
        1: punctuation.definition.variable.vector
    - match: '(\$)[a-zA-Z_]\w*'
      scope: variable.other.readwrite.global.vector
      captures:
        1: punctuation.definition.variable.vector
    - match: '(\$)(!|@|&|`|''|\+|\d+|~|=|/|\\|,|;|\.|<|>|_|\*|\$|\?|:|"|-[0adFiIlpv])'
      scope: variable.other.readwrite.global.pre-defined.vector
      captures:
        1: punctuation.definition.variable.vector
    - match: '\b(ENV)\['
      captures:
        1: variable.other.constant.vector
      push:
        - meta_scope: meta.environment-variable.vector
        - match: '\]'
          pop: true
        - include: main
    - match: '\b[A-Z]\w*(?=((\.|::)[A-Za-z]|\[))'
      scope: support.class.vector
    - match: '\b[A-Z]\w*\b'
      scope: variable.other.constant.vector
    - match: |-
        (?x)
         (?=def\b)                                                      # an optimization to help Oniguruma fail fast
         (?<=^|\s)(def)\s+                                              # the def keyword
         ( (?>[a-zA-Z_]\w*(?>\.|::))?                                   # a method name prefix
           (?>[a-zA-Z_]\w*(?>[?!]|=(?!>))?                              # the method name
           |===?|>[>=]?|<=>|<[<=]?|[%&`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
         \s*(\()                                                        # the opening parenthesis for arguments
      comment: the method pattern comes from the symbol pattern, see there for a explaination
      captures:
        1: keyword.control.def.vector
        2: entity.name.function.vector
        3: punctuation.definition.parameters.vector
      push:
        - meta_scope: meta.function.method.with-arguments.vector
        - meta_content_scope: variable.parameter.function.vector
        - match: \)
          captures:
            0: punctuation.definition.parameters.vector
          pop: true
        - include: main
    - match: |-
        (?x)
         (?=def\b)                                                      # an optimization to help Oniguruma fail fast
         (?<=^|\s)(def)\s+                                              # the def keyword
         ( (?>[a-zA-Z_]\w*(?>\.|::))?                                   # a method name prefix
           (?>[a-zA-Z_]\w*(?>[?!]|=(?!>))?                              # the method name
           |===?|>[>=]?|<=>|<[<=]?|[%&`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) )  # …or an operator method
         [ \t]                                                          # the space separating the arguments
         (?=[ \t]*[^\s#;])                                              # make sure arguments and not a comment follow
      comment: same as the previous rule, but without parentheses around the arguments
      captures:
        1: keyword.control.def.vector
        2: entity.name.function.vector
      push:
        - meta_scope: meta.function.method.with-arguments.vector
        - meta_content_scope: variable.parameter.function.vector
        - match: $
          pop: true
        - include: main
    - match: |-
        (?x)
         (?=def\b)                                                           # an optimization to help Oniguruma fail fast
         (?<=^|\s)(def)\b                                                    # the def keyword
         ( \s+                                                               # an optional group of whitespace followed by…
           ( (?>[a-zA-Z_]\w*(?>\.|::))?                                      # a method name prefix
             (?>[a-zA-Z_]\w*(?>[?!]|=(?!>))?                                 # the method name
             |===?|>[>=]?|<=>|<[<=]?|[%&`/\|]|\*\*?|=?~|[-+]@?|\[\]=?) ) )?  # …or an operator method
      comment: the optional name is just to catch the def also without a method-name
      scope: meta.function.method.without-arguments.vector
      captures:
        1: keyword.control.def.vector
        3: entity.name.function.vector
    - match: '\b(0[xX]\h(?>_?\h)*|\d(?>_?\d)*(\.(?![^[:space:][:digit:]])(?>_?\d)*)?([eE][-+]?\d(?>_?\d)*)?|0[bB][01]+)\b'
      scope: constant.numeric.vector
    - match: ":'"
      captures:
        0: punctuation.definition.constant.vector
      push:
        - meta_scope: constant.other.symbol.single-quoted.vector
        - match: "'"
          captures:
            0: punctuation.definition.constant.vector
          pop: true
        - match: '\\[''\\]'
          scope: constant.character.escape.vector
    - match: ':"'
      captures:
        0: punctuation.definition.constant.vector
      push:
        - meta_scope: constant.other.symbol.double-quoted.vector
        - match: '"'
          captures:
            0: punctuation.definition.constant.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
    - match: /=
      comment: Needs higher precedence than regular expressions.
      scope: keyword.operator.assignment.augmented.vector
    - match: "'"
      comment: single quoted string (does not allow interpolation)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.single.vector
        - match: "'"
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - match: \\'|\\\\
          scope: constant.character.escape.vector
        - include: string_placeholder
    - match: '"'
      comment: double quoted string (allows for interpolation)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.double.vector
        - match: '"'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: string_placeholder
    - match: "`"
      comment: execute string (allows for interpolation)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.interpolated.vector
        - match: "`"
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
    - match: '%x\{'
      comment: execute string (allow for interpolation)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.interpolated.vector
        - match: '\}'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_curly_i
    - match: '%x\['
      comment: execute string (allow for interpolation)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.interpolated.vector
        - match: '\]'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_brackets_i
    - match: '%x\<'
      comment: execute string (allow for interpolation)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.interpolated.vector
        - match: \>
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_ltgt_i
    - match: '%x\('
      comment: execute string (allow for interpolation)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.interpolated.vector
        - match: \)
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_parens_i
    - match: '%x([^\w])'
      comment: execute string (allow for interpolation)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.interpolated.vector
        - match: \1
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
    - match: |-
        (?x)
           (?:
             ^                      # beginning of line
           | (?<=                   # or look-behind on:
               [=><~(?:\[,|&;]
             | [\s;]if\s			# keywords
             | [\s;]elsif\s
             | [\s;]while\s
             | [\s;]unless\s
             | [\s;]when\s
             | [\s;]assert_match\s
             | [\s;]or\s			# boolean operators
             | [\s;]and\s
             | [\s;]not\s
             | [\s.]index\s			# methods
             | [\s.]scan\s
             | [\s.]sub\s
             | [\s.]sub!\s
             | [\s.]gsub\s
             | [\s.]gsub!\s
             | [\s.]match\s
             )
           | (?<=                  # or a look-behind with line anchor:
                ^when\s            # duplication necessary due to limits of regex
              | ^if\s
              | ^elsif\s
              | ^while\s
              | ^unless\s
              )
           )
           \s*((/))(?![*+{}?])
      comment: |
        regular expressions (normal)
                    we only start a regexp if the character before it (excluding whitespace)
                    is what we think is before a regexp
      captures:
        1: string.regexp.classic.vector
        2: punctuation.definition.string.vector
      push:
        - meta_scope: string.regexp.classic.vector
        - match: "((/)([eimnosux]*))"
          captures:
            1: punctuation.definition.string.vector
          pop: true
        - include: regex_sub
    - match: '%r\{'
      comment: regular expressions (literal)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.regexp.mod-r.vector
        - match: '\}[eimnosux]*'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: regex_sub
        - include: nest_curly_r
    - match: '%r\['
      comment: regular expressions (literal)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.regexp.mod-r.vector
        - match: '\][eimnosux]*'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: regex_sub
        - include: nest_brackets_r
    - match: '%r\('
      comment: regular expressions (literal)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.regexp.mod-r.vector
        - match: '\)[eimnosux]*'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: regex_sub
        - include: nest_parens_r
    - match: '%r\<'
      comment: regular expressions (literal)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.regexp.mod-r.vector
        - match: '\>[eimnosux]*'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: regex_sub
        - include: nest_ltgt_r
    - match: '%r([^\w])'
      comment: regular expressions (literal)
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.regexp.mod-r.vector
        - match: '\1[eimnosux]*'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: regex_sub
    - match: '%[WI]?\('
      comment: literal capable of interpolation ()
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.upper.vector
        - match: \)
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_parens_i
    - match: '%[WI]?\['
      comment: "literal capable of interpolation []"
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.upper.vector
        - match: '\]'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_brackets_i
    - match: '%[WI]?\<'
      comment: literal capable of interpolation <>
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.upper.vector
        - match: \>
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_ltgt_i
    - match: '%[WI]?\{'
      comment: "literal capable of interpolation -- {}"
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.double.vector.mod
        - match: '\}'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_curly_i
    - match: '%[WI]([^\w])'
      comment: literal capable of interpolation -- wildcard
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.upper.vector
        - match: \1
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
    - match: '%([^\w\s=])'
      comment: literal capable of interpolation -- wildcard
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.other.vector
        - match: \1
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
    - match: '%[wsi]\('
      comment: literal incapable of interpolation -- ()
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.lower.vector
        - match: \)
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - match: \\\)|\\\\
          scope: constant.character.escape.vector
        - include: nest_parens
    - match: '%[wsi]\<'
      comment: literal incapable of interpolation -- <>
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.lower.vector
        - match: \>
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - match: \\\>|\\\\
          scope: constant.character.escape.vector
        - include: nest_ltgt
    - match: '%[wsi]\['
      comment: "literal incapable of interpolation -- []"
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.lower.vector
        - match: '\]'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - match: '\\\]|\\\\'
          scope: constant.character.escape.vector
        - include: nest_brackets
    - match: '%[wsi]\{'
      comment: "literal incapable of interpolation -- {}"
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.lower.vector
        - match: '\}'
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - match: '\\\}|\\\\'
          scope: constant.character.escape.vector
        - include: nest_curly
    - match: '%[wsi]([^\w])'
      comment: literal incapable of interpolation -- wildcard
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.quoted.other.literal.lower.vector
        - match: \1
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - match: \\.
          comment: Cant be named because its not neccesarily an escape.
    - match: '(?<!:)(:)(?>[a-zA-Z_]\w*(?>[?!]|=(?![>=]))?|===?|>[>=]?|<[<=]?|<=>|[%&`/\|]|\*\*?|=?~|[-+]@?|\[\]=?|@@?[a-zA-Z_]\w*)'
      comment: symbols
      scope: constant.other.symbol.vector
      captures:
        1: punctuation.definition.constant.vector
    - match: ^=begin
      comment: multiline comments
      captures:
        0: punctuation.definition.comment.vector
      push:
        - meta_scope: comment.block.documentation.vector
        - match: ^=end
          captures:
            0: punctuation.definition.comment.vector
          pop: true
    - match: '(?:^[ \t]+)?(#).*$\n?'
      scope: comment.line.number-sign.vector
      captures:
        1: punctuation.definition.comment.vector
    - match: '(?<!\w)\?(\\(x\h{1,2}(?!\h)\b|0[0-7]{0,2}(?![0-7])\b|[^x0MC])|(\\[MC]-)+\w|[^\s\\])'
      comment: |
        matches questionmark-letters.

                    examples (1st alternation = hex):
                    ?\x1     ?\x61

                    examples (2nd alternation = octal):
                    ?\0      ?\07     ?\017

                    examples (3rd alternation = escaped):
                    ?\n      ?\b

                    examples (4th alternation = meta-ctrl):
                    ?\C-a    ?\M-a    ?\C-\M-\C-\M-a

                    examples (4th alternation = normal):
                    ?a       ?A       ?0
                    ?*       ?"       ?(
                    ?.       ?#


                    the negative lookbehind prevents against matching
                    p(42.tainted?)
      scope: constant.numeric.vector
    - match: ^__END__\n
      comment: __END__ marker
      captures:
        0: string.unquoted.program-block.vector
      push:
        - meta_content_scope: text.plain
        - match: (?=not)impossible
          captures:
            0: string.unquoted.program-block.vector
          pop: true
        - match: (?=<?xml|<(?i:html\b)|!DOCTYPE (?i:html\b))
          push:
            - meta_scope: text.html.embedded.vector
            - match: (?=not)impossible
              pop: true
            - include: scope:text.html.basic
    - match: '(?><<[-~]("?)((?:[_\w]+_|)HTML)\b\1)'
      comment: heredoc with embedded HTML and indented terminator
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.unquoted.embedded.html.vector
        - meta_content_scope: text.html.embedded.vector
        - match: \s*\2$
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: heredoc
        - include: scope:text.html.basic
        - include: interpolated_vector
        - include: escaped_char
    - match: '(?><<[-~]("?)((?:[_\w]+_|)SQL)\b\1)'
      comment: heredoc with embedded SQL and indented terminator
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.unquoted.embedded.sql.vector
        - meta_content_scope: text.sql.embedded.vector
        - match: \s*\2$
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: heredoc
        - include: scope:source.sql
        - include: interpolated_vector
        - include: escaped_char
    - match: '(?><<[-~]("?)((?:[_\w]+_|)CSS)\b\1)'
      comment: heredoc with embedded css and indented terminator
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.unquoted.embedded.css.vector
        - meta_content_scope: text.css.embedded.vector
        - match: \s*\2$
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: heredoc
        - include: 'scope:source.css'
        - include: interpolated_vector
        - include: escaped_char
    - match: '(?><<[-~]("?)((?:[_\w]+_|)(?:JS|JAVASCRIPT))\b\1)'
      comment: heredoc with embedded javascript and indented terminator
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.unquoted.embedded.js.vector
        - meta_content_scope: text.js.embedded.vector
        - match: \s*\2$
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: heredoc
        - include: 'scope:source.js'
        - include: interpolated_vector
        - include: escaped_char
    # - match: '(?><<[-~]("?)((?:[_\w]+_|)(?:SH|SHELL))\b\1)'
    #   comment: heredoc with embedded shell and indented terminator
    #   captures:
    #     0: punctuation.definition.string.begin.vector
    #   push:
    #     - meta_scope: string.unquoted.embedded.shell.vector
    #     - meta_content_scope: text.shell.embedded.vector
    #     - match: \s*\2$
    #       captures:
    #         0: punctuation.definition.string.end.vector
    #       pop: true
    #     - include: heredoc
    #     - include: Shell-Unix-Generic.sublime-syntax
    #     - include: interpolated_vector
    #     - include: escaped_char
    - match: '(?><<[-~]("?)((?:[_\w]+_|)VECTOR)\b\1)'
      comment: heredoc with embedded vector and indented terminator
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.unquoted.embedded.vector.vector
        - meta_content_scope: text.vector.embedded.vector
        - match: \s*\2$
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: heredoc
        - include: main
        - include: interpolated_vector
        - include: escaped_char
    - match: (?>\=\s*<<(\w+))
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.unquoted.heredoc.vector
        - match: ^\1$
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: heredoc
        - include: interpolated_vector
        - include: escaped_char
    - match: '(?><<[-~](\w+))'
      comment: heredoc with indented terminator
      captures:
        0: punctuation.definition.string.begin.vector
      push:
        - meta_scope: string.unquoted.heredoc.vector
        - match: \s*\1$
          captures:
            0: punctuation.definition.string.end.vector
          pop: true
        - include: heredoc
        - include: interpolated_vector
        - include: escaped_char
    - match: '(?<=\{|do|\{\s|do\s)(\|)'
      captures:
        1: punctuation.separator.variable.vector
      push:
        - meta_scope: meta.variable.block.vector
        - match: (\|)
          scope: punctuation.separator.variable.vector
          pop: true
        - match: "[_a-zA-Z][_a-zA-Z0-9]*"
          scope: variable.other.block.vector
        - match: ","
          scope: punctuation.separator.variable.vector
        - match: \*|&
          scope: keyword.operator.arithmetic.vector
    - match: "=>"
      scope: punctuation.separator.key-value
    - match: '<<=|%=|&=|\*=|\*\*=|\+=|\-=|\^=|\|{1,2}=|<<'
      scope: keyword.operator.assignment.augmented.vector
    - match: '<=>|<(?!<|=)|>(?!<|=|>)|<=|>=|===|==|=~|!=|!~|(?<=[ \t])\?'
      scope: keyword.operator.comparison.vector
    - match: (%|&|\*\*|\*|\+|\-|/)
      scope: keyword.operator.arithmetic.vector
    - match: "="
      scope: keyword.operator.assignment.vector
    - match: \||~|>>
      scope: keyword.operator.other.vector
    - match: ":"
      scope: punctuation.separator.other.vector
    - match: \;
      scope: punctuation.separator.statement.vector
    - match: ","
      scope: punctuation.separator.object.vector
    - match: '\.|::'
      scope: punctuation.separator.method.vector
    - match: '\{|\}'
      scope: punctuation.section.scope.vector
    - match: '\[|\]'
      scope: punctuation.section.array.vector
    - match: \(|\)
      scope: punctuation.section.function.vector
  escaped_char:
    - match: '\\(?:[0-7]{1,3}|x[\da-fA-F]{1,2}|.)'
      scope: constant.character.escape.vector
  heredoc:
    - match: ^<<-?\w+
      push:
        - match: $
          pop: true
        - include: main
  interpolated_vector:
    - match: '#\{(\})'
      scope: source.vector.embedded.source
      captures:
        0: punctuation.section.embedded.vector
        1: source.vector.embedded.source.empty
    - match: '#\{'
      captures:
        0: punctuation.section.embedded.vector
      push:
        - meta_scope: source.vector.embedded.source
        - match: '\}'
          captures:
            0: punctuation.section.embedded.vector
          pop: true
        - include: nest_curly_and_self
        - include: main
    - match: '(#@)[a-zA-Z_]\w*'
      scope: variable.other.readwrite.instance.vector
      captures:
        1: punctuation.definition.variable.vector
    - match: '(#@@)[a-zA-Z_]\w*'
      scope: variable.other.readwrite.class.vector
      captures:
        1: punctuation.definition.variable.vector
    - match: '(#\$)[a-zA-Z_]\w*'
      scope: variable.other.readwrite.global.vector
      captures:
        1: punctuation.definition.variable.vector
  nest_brackets:
    - match: '\['
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: '\]'
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: nest_brackets
  nest_brackets_i:
    - match: '\['
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: '\]'
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_brackets_i
  nest_brackets_r:
    - match: '\['
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: '\]'
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: regex_sub
        - include: nest_brackets_r
  nest_curly:
    - match: '\{'
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: '\}'
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: nest_curly
  nest_curly_and_self:
    - match: '\{'
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: '\}'
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: nest_curly_and_self
    - include: main
  nest_curly_i:
    - match: '\{'
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: '\}'
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_curly_i
  nest_curly_r:
    - match: '\{'
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: '\}'
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: regex_sub
        - include: nest_curly_r
  nest_ltgt:
    - match: \<
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: \>
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: nest_ltgt
  nest_ltgt_i:
    - match: \<
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: \>
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_ltgt_i
  nest_ltgt_r:
    - match: \<
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: \>
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: regex_sub
        - include: nest_ltgt_r
  nest_parens:
    - match: \(
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: \)
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: nest_parens
  nest_parens_i:
    - match: \(
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: \)
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: interpolated_vector
        - include: escaped_char
        - include: nest_parens_i
  nest_parens_r:
    - match: \(
      captures:
        0: punctuation.section.scope.vector
      push:
        - match: \)
          captures:
            0: punctuation.section.scope.vector
          pop: true
        - include: regex_sub
        - include: nest_parens_r
  regex_sub:
    - include: interpolated_vector
    - include: escaped_char
    - match: '(\{)\d+(,\d+)?(\})'
      scope: string.regexp.arbitrary-repetition.vector
      captures:
        1: punctuation.definition.arbitrary-repetition.vector
        3: punctuation.definition.arbitrary-repetition.vector
    - match: '\[(?:\^?\])?'
      captures:
        0: punctuation.definition.character-class.vector
      push:
        - meta_scope: string.regexp.character-class.vector
        - match: '\]'
          captures:
            0: punctuation.definition.character-class.vector
          pop: true
        - include: escaped_char
    - match: \(
      captures:
        0: punctuation.definition.group.vector
      push:
        - meta_scope: string.regexp.group.vector
        - match: \)
          captures:
            0: punctuation.definition.group.vector
          pop: true
        - include: regex_sub
    - match: '(?<=^|\s)(#)\s[[a-zA-Z0-9,. \t?!-][^\x{00}-\x{7F}]]*$'
      comment: We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.
      scope: comment.line.number-sign.vector
      captures:
        1: punctuation.definition.comment.vector
  string_placeholder:
    - match: |-
        (?x)%
            ([#0\- +\*]|(\d+\$))*                       # flags
            (-?\d+)?                                    # minimum field width
            (\.(\d+)?)?                                 # precision
            [diouxXDOUeEfFgGaAcCsSpnvtTbByYhHmMzZ%]     # conversion type
      scope: constant.other.placeholder.vector
      comment: |
        %[flags][width][.precision]type

        A format sequence consists of a percent sign, followed by optional
        flags, width, and precision indicators, then terminated with a field
        type character.

        Also this is used for time format in strftime.
